{
    "texts": {
        "using_default_code": "It seems that you are stuck with the default code. Try to modify it to solve the task. If you need a hint, click the 'Show Hint' button.",
        "success": "Congratulations on your excellent choice of recursion cases! Your selection demonstrates a deep understanding of how recursion mirrors real-world processes, showcasing your ability to think critically and abstractly about complex concepts."
    },
    "tasks": {
        "quiz": {
            "name": "Recursion Quiz",
            "question": "Which of the following best represents the concept of recursion?",
            "options": [
                { "id": "1", "name": "Matryoshka dolls (Russian nesting dolls) opening one after another." },
                { "id": "2", "name": "Cleaning a house room by room." },
                { "id": "3", "name": "A mirror reflecting another mirror." },
                { "id": "4", "name": "The process of making a sandwich." },
                { "id": "5", "name": "A family tree tracing back generations." },
                { "id": "6", "name": "Water flowing down a river." },
                { "id": "7", "name": "The structure of a fractal, where each part is a smaller copy of the whole." },
                { "id": "8", "name": "A countdown timer that subtracts one second until reaching zero." }
            ],
            "correctAnswers": "1, 5, 7, 8",
            "successMessage": "Great job! You've correctly identified the examples that best represent the concept of recursion."
        },
        "code_example": {
            "id": 1,
            "slug": "code_example",
            "name": "Recursion: Code Example",
            "text": "Given Function: The factorial function, as provided, calculates the factorial of a number n (e.g., 5! = 5 * 4 * 3 * 2 * 1 = 120) through recursion.\n- Big Task: Find the factorial of a number, say 5 (which means 5 * 4 * 3 * 2 * 1).\n- Break It Down: To find 5!, find 4! first (which is 4 * 3 * 2 * 1), then multiply that by 5.\n- Stopping Point: If we reach 1, we know the factorial of 1 is just 1, so we don't need to break it down further.\n- Combine Solutions: Multiply each step's result by the next number up until we reach our original number.\n Your task:\n- Modify the given factorial function to print a message at each step of the recursion, showing the current value of n and the operation being performed. This task will help you visualize the recursive calls and understand how the function progresses towards the base case and unwinds back.",
            "code": "def factorial(n):\n   # Base case: if n is 0, the factorial is 1\n    if n == 0:\n        return 1\n   # Recursive case: n! = n * (n-1)!\n    else:\n        return n * factorial(n-1)\n\n# Example usage\nprint(factorial(5))  # Output: 120",
            "output_default": "#Here will be the output of your code",
            "successMessage": "Great job! You've successfully implemented the factorial function using recursion.",
            "answer": "120\n"
        },
        "wrond_code": {
            "id": 2,
            "slug": "wrond_code",
            "name": "Recursion: Find a Bug!",
            "text": "In the provided Python function factorial, there's a small but crucial mistake that affects its functionality. Your task is to review the code carefully, identify the mistake, and correct it.",
            "code": "def factorial(n):\n   # Base case: if n is 0, the factorial is 1\n    if n == 1:\n        return 1\n   # Recursive case: n! = n * (n-1)!\n    else:\n        return n * factorial(n-2)\n\n# Example usage\nprint(factorial(5))  # Output: 120",
            "output_default": "#Here will be the output of your code",
            "successMessage": "Great job! You've successfully identified and corrected the mistake in the factorial function.",
            "additional_question": "Explain what was the mistake in the code and how did you fix it?",
            "placeholder": "Write your answer here..."
        },
        "code_exercise": {
            "id": 3,
            "slug": "code_exercise",
            "name": "Recursion: Basic Task",
            "text": "Implement a Python function named fibonacci that calculates the nth number in the Fibonacci sequence using recursion. \nThe Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...",
            "code": "def fibonacci(n):\n#Write your code here",
            "successMessage": "Great job! You've successfully implemented the fibonacci function using recursion."
        },
        "implementation": {
            "id": 4,
            "slug": "implementation",
            "name": "Recursion: Implementation",
            "text": " Implement a Python function named reverse_string that uses recursion to reverse a given string.\nTest the function with various strings, including edge cases like an empty string or a string with only one character.",
            "code": "def reverse_string(s):\n#Write your code here",
            "successMessage": "Great job! You've successfully implemented the reverse_string function using recursion.",
            "output_default": "#Here will be the output of your code",
            "hint": "    Function Signature: Define the function as def reverse_string(s):, where s is the string to be reversed.\n Base Case: If the string is empty or consists of a single character, it is its own reverse.\n    Recursive Step: For a string of length n, the reversed string can be constructed by appending the first character to the reverse of the substring that excludes this character."
        }
    }
}